type ScraperType {
    id: ID!
    createdAt: DateTime!
    updatedAt: DateTime!
    displayName: String!
    parameters: [ScraperTypeParameter!]!
}

type ScraperTypeParameter {
    id: ID!
    displayName: String!
    type: ScraperParameterType!
}

enum ScraperParameterType {
    String
    Password
    Boolean
    Integer
    Float
    Date
    Account
}

extend type Query {
    scraperTypes: [ScraperType!]!
}

type Scraper {
    id: ID!
    createdAt: DateTime!
    updatedAt: DateTime!
    displayName: String!
    type: ScraperType!
    lastSuccessfulScrapedDate: DateTime,
    tenant: Tenant!
    parameters: [ScraperParameter!]!
    job(id: ID!): ScraperJob
    jobs: [ScraperJob!]!
}

type ScraperParameter {
    parameter: ScraperTypeParameter!
    value: String!
}

type ScraperJob {
    id: ID!
    createdAt: DateTime!
    scraper: Scraper!
    parameters: [ScraperParameter!]!
    status: ScraperJobStatus!
    logs(page: Int, pageSize: Int): [String!]!
}

enum ScraperJobStatus {
    Pending,
    Running,
    Successful,
    Failed
}

extend type Mutation {
    upsertScraper(
        tenantID: ID!,
        id: ID,
        displayName: String!,
        scraperTypeID: ID!,
        parameters: [ScraperParameterInput!]!
    ): Scraper!
    deleteScraper(tenantID: ID!, id: ID!): Void!
    setLastSuccessfulScrapedDate(tenantID: ID!, scraperID: ID!, date: DateTime!): DateTime!
    triggerScraper(tenantID: ID!, id: ID!): ScraperJob!
}

input ScraperParameterInput {
    parameterID: ID!
    value: String!
}
