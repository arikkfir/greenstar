version: 3
output: prefixed

env:
  CLUSTER_NAME: greenstar
  DOMAIN: greenstar.test

dotenv:
  - .env

run: once

includes:
  toolchain:
    internal: false
    optional: false
    taskfile: build/Taskfile-toolchain.yaml

set:
  - x

silent: true

tasks:

  setup-domain-dns: { deps: [ toolchain:setup-domain-dns ] }

  generate:
    deps:
      - generate-graphql-acme
      - generate-graphql-frontend
      - generate-graphql-ratesjob
      - generate-graphql-scrapers
      - generate-graphql-server
      - generate-certificates

  generate-graphql-acme:
    deps: [ toolchain:node ]
    dir: acme
    cmds:
      - rm -rfv src/graphql
      - npm run codegen

  generate-graphql-frontend:
    deps: [ toolchain:node ]
    dir: frontend
    cmds:
      - rm -rfv src/graphql
      - npm run codegen

  generate-graphql-ratesjob:
    deps: [ toolchain:node ]
    dir: ratesjob
    cmds:
      - rm -rfv src/graphql
      - npm run codegen

  generate-graphql-scrapers:
    deps: [ toolchain:node ]
    dir: scrapers
    cmds:
      - rm -rfv src/generated
      - npm run codegen

  generate-graphql-server:
    deps: [ toolchain:node ]
    dir: server
    cmds:
      - rm -rfv src/generated
      - npm run codegen

  generate-certificates:
    deps: [ toolchain:mkcert ]
    cmds:
      - mkcert -cert-file deploy/local/wildcard-tls.local.crt -key-file deploy/local/wildcard-tls.local.key "${DOMAIN}" "*.app.${DOMAIN}" "*.${DOMAIN}" "localhost" "127.0.0.1" "::1"
      - defer: rm -fv deploy/local/wildcard-tls.local.crt deploy/local/wildcard-tls.local.key
      - kubectl create secret tls wildcard-tls --cert=deploy/local/wildcard-tls.local.crt --key=deploy/local/wildcard-tls.local.key --dry-run=client --output=yaml > deploy/local/wildcard-tls-secret.local.yaml
    status:
      - test -f deploy/local/wildcard-tls-secret.local.yaml

  create-cluster:
    deps: [ toolchain:kind ]
    cmds:
      - kind create cluster --name "${CLUSTER_NAME}" --config=deploy/local/kind-cluster-config.yaml --wait "1m"
      - curl -sSL "https://github.com/kubernetes-sigs/gateway-api/releases/download/v1.1.0/experimental-install.yaml" | kubectl apply -f -
    status:
      - kind get clusters -q | grep -E "^${CLUSTER_NAME}\$"
      - kubectl get crd | grep gateway.networking.k8s.io

  teardown-cluster:
    deps: [ toolchain:kind ]
    cmds:
      - kind delete cluster --name "${CLUSTER_NAME}"
    status:
      - test "$(kind get clusters --quiet 2>/dev/null | grep -E "^${CLUSTER_NAME}\$"| wc -l | sed 's/^[ \t]*//')" = "0"

  ensure-observability-namespace:
    deps: [ create-cluster ]
    cmds:
      - kubectl get namespace -o=name | grep -qE "^namespace/observability$" || kubectl create namespace observability
    status:
      - kubectl get namespace -o=name | grep -qE "^namespace/observability$"

  setup-gateway:
    deps: [ create-cluster, generate-certificates ]
    cmds:
      - |
        helm upgrade --install traefik traefik \
          --repo "https://traefik.github.io/charts" --version="v30.1.0" \
          --create-namespace --namespace="ingress" \
          -f deploy/local/traefik-values.yaml \
          --wait
      - kubectl apply --namespace=ingress -f ./deploy/local/wildcard-tls-secret.local.yaml
      - kubectl apply --namespace=ingress -f ./deploy/local/ingress-gateway.yaml
    sources:
      - ./deploy/local/wildcard-tls-secret.local.yaml
      - ./deploy/local/ingress-gateway.yaml
      - ./deploy/local/traefik-values.yaml
    status:
      - helm --namespace=ingress get metadata traefik

  setup-kube-state-metrics:
    deps: [ create-cluster, ensure-observability-namespace ]
    cmds:
      - |
        helm upgrade --install kube-state-metrics kube-state-metrics \
          --repo https://prometheus-community.github.io/helm-charts \
          --create-namespace \
          --namespace=observability \
          --values ./deploy/local/kube-state-metrics-values.yaml \
          --wait
    sources:
      - ./deploy/local/kube-state-metrics-values.yaml
    status:
      - helm --namespace=observability get metadata kube-state-metrics

  setup-metrics-server:
    deps: [ create-cluster, ensure-observability-namespace ]
    cmds:
      - |
        helm upgrade --install metrics-server metrics-server \
          --repo https://kubernetes-sigs.github.io/metrics-server \
          --create-namespace \
          --namespace=observability \
          --set 'args={"--kubelet-insecure-tls"}' \
          --wait
    status:
      - helm --namespace=observability get metadata metrics-server

  setup-prometheus:
    deps: [ create-cluster, ensure-observability-namespace ]
    cmds:
      - |
        helm upgrade --install prometheus prometheus \
          --repo https://prometheus-community.github.io/helm-charts \
          --create-namespace \
          --namespace=observability \
          --values ./deploy/local/prometheus-values.yaml \
          --wait
      - kubectl apply --namespace=observability -f ./deploy/local/prometheus-routes.yaml
    sources:
      - ./deploy/local/prometheus-values.yaml
      - ./deploy/local/prometheus-routes.yaml
    status:
      - helm --namespace=observability get metadata prometheus

  setup-prometheus-node-exporter:
    deps: [ create-cluster, ensure-observability-namespace ]
    cmds:
      - |
        helm upgrade --install prometheus-node-exporter prometheus-node-exporter \
          --repo https://prometheus-community.github.io/helm-charts \
          --create-namespace \
          --namespace=observability \
          --values ./deploy/local/prometheus-node-exporter-values.yaml \
          --wait
    sources:
      - ./deploy/local/prometheus-node-exporter-values.yaml
    status:
      - helm --namespace=observability get metadata prometheus-node-exporter

  setup-jaeger:
    deps: [ create-cluster, ensure-observability-namespace ]
    cmds:
      - kubectl apply --namespace=observability -f deploy/local/jaeger.yaml
    sources:
      - deploy/local/jaeger.yaml
    status:
      - kubectl diff --namespace=observability -f deploy/local/jaeger.yaml

  setup-grafana:
    deps: [ create-cluster, ensure-observability-namespace ]
    cmds:
      - |
        kustomize build deploy/local/grafana | kubectl apply -f - --namespace observability
        helm upgrade --install grafana grafana \
          --repo https://grafana.github.io/helm-charts \
          --create-namespace \
          --namespace=observability \
          --values ./deploy/local/grafana-values.yaml \
          --wait
    sources:
      - ./deploy/local/grafana-values.yaml
      - ./deploy/local/grafana/kustomization.yaml
      - ./deploy/local/grafana/dashboards/*.json
    status:
      - helm --namespace=observability get metadata grafana

  setup-observability:
    deps:
      - setup-gateway
      - setup-kube-state-metrics
      - setup-metrics-server
      - setup-prometheus-node-exporter
      - setup-prometheus
      - setup-jaeger
      - setup-grafana

  setup-tenant-helm-values-files:
    sources:
      - ./deploy/local/acme/*.yaml
    generates:
      - ./hack/greenstar-tenants-values.yaml
    cmds:
      - # noinspection YAMLSchemaValidation
        for: sources
        cmd: |
          mkdir -pv ./hack && touch ./hack/greenstar-tenants-values.yaml
          NAME="$(basename "{{ .ITEM }}")" CONTENT="$(cat "{{ .ITEM }}")" \
            yq -i '.acme.files += [{"name": env(NAME), "content": env(CONTENT)}]' ./hack/greenstar-tenants-values.yaml

  setup-frontend-geopify-helm-values-files:
    cmds:
      - mkdir -pv ./hack && touch ./hack/greenstar-frontend-values.yaml
      - yq -i '.frontend.extraEnv.VITE_GEOAPIFY_API_KEY.value = strenv(GEOAPIFY_API_KEY)' ./hack/greenstar-frontend-values.yaml
    status:
      - yq -e '.frontend.extraEnv.VITE_GEOAPIFY_API_KEY.value == strenv(GEOAPIFY_API_KEY)' ./hack/greenstar-frontend-values.yaml

  enable-gcp-workload-identity-federation:
    deps: [create-cluster]
    env:
      WHOAMI:
        sh: whoami
      ATTRIBUTE_MAPPINGS: google.subject=assertion.sub,attribute.namespace=assertion['kubernetes.io']['namespace'],attribute.service_account_name=assertion['kubernetes.io']['serviceaccount']['name'],attribute.pod=assertion['kubernetes.io']['pod']['name']
      CLOUDSDK_CORE_DISABLE_PROMPTS: "1"
      GCP_PROJECT_ID:
        sh: gcloud config get-value project
      GCP_PROJECT_NUMBER:
        sh: gcloud projects describe ${GCP_PROJECT_ID} --format="value(projectNumber)"
      GCP_WORKLOAD_IDENTITY_POOL: greenstar
      GCP_WORKLOAD_IDENTITY_PROVIDER_ID:
        sh: echo -n local-kind-jwks-${WHOAMI}
      OIDC_AUDIENCE:
        sh: echo -n https://iam.googleapis.com/projects/${GCP_PROJECT_NUMBER}/locations/global/workloadIdentityPools/greenstar/providers/local-kind-jwks-${WHOAMI}
      POD_ADC_FILE_PATH: /etc/workload-identity/credential-configuration.json
    cmds:
      - |
        mkdir -pv hack
        kubectl get --raw /openid/v1/jwks > hack/cluster-jwks.json
        kubectl get --raw /.well-known/openid-configuration | jq -r .issuer > hack/cluster-oidc-issuer
        if ! gcloud iam workload-identity-pools describe "${GCP_WORKLOAD_IDENTITY_POOL}" --location="global" 2>/dev/null; then
          gcloud iam workload-identity-pools create greenstar \
            --location="global" \
            --description="Workload Identity Pool for GreenSTAR" \
            --display-name="GreenSTAR";
        fi
        if ! gcloud iam workload-identity-pools providers describe --location="global" --workload-identity-pool="${GCP_WORKLOAD_IDENTITY_POOL}" "${GCP_WORKLOAD_IDENTITY_PROVIDER_ID}" 2>/dev/null; then
          gcloud iam workload-identity-pools providers create-oidc "${GCP_WORKLOAD_IDENTITY_PROVIDER_ID}" \
            --location="global" \
            --workload-identity-pool="${GCP_WORKLOAD_IDENTITY_POOL}" \
            --issuer-uri="$(cat hack/cluster-oidc-issuer)" \
            --jwk-json-path="hack/cluster-jwks.json" \
            --allowed-audiences="" \
            --attribute-mapping="${ATTRIBUTE_MAPPINGS}"
        else
          gcloud iam workload-identity-pools providers update-oidc "${GCP_WORKLOAD_IDENTITY_PROVIDER_ID}" \
            --location="global" \
            --workload-identity-pool="${GCP_WORKLOAD_IDENTITY_POOL}" \
            --issuer-uri="$(cat hack/cluster-oidc-issuer)" \
            --jwk-json-path="hack/cluster-jwks.json" \
            --allowed-audiences="" \
            --attribute-mapping="${ATTRIBUTE_MAPPINGS}"
        fi
        gcloud iam workload-identity-pools create-cred-config \
          "projects/${GCP_PROJECT_NUMBER}/locations/global/workloadIdentityPools/${GCP_WORKLOAD_IDENTITY_POOL}/providers/${GCP_WORKLOAD_IDENTITY_PROVIDER_ID}" \
          --credential-source-file=/var/run/service-account/token \
          --credential-source-type=text \
          --output-file=hack/credential-configuration.json
        kubectl get namespace greenstar || kubectl create namespace greenstar
        kubectl delete configmap -n greenstar gcp-workload-identity-federation || true
        kubectl create configmap -n greenstar gcp-workload-identity-federation --from-file hack/credential-configuration.json
        mkdir -pv ./hack && touch ./hack/greenstar-server-values.yaml
        yq -i '.server.extraEnv = (.server.extraEnv // {})' ./hack/greenstar-server-values.yaml
        yq -i '.server.volumes = (.server.volumes // [])' ./hack/greenstar-server-values.yaml
        yq -i '.server.volumeMounts = (.server.volumeMounts // [])' ./hack/greenstar-server-values.yaml
        cat <<EOF | yq -i ea 'select(fileIndex == 0) *+ select(fileIndex == 1)' ./hack/greenstar-server-values.yaml -
        server:
          extraEnv:
            GCP_PROJECT_ID:
              value: "${GCP_PROJECT_ID}"
            GOOGLE_APPLICATION_CREDENTIALS:
              value: "${POD_ADC_FILE_PATH}"
          volumeMounts:
            - name: token
              mountPath: /var/run/service-account
              readOnly: true
            - name: workload-identity-credential-configuration
              mountPath: /etc/workload-identity
              readOnly: true
          volumes:
            - name: token
              projected:
                sources:
                  - serviceAccountToken:
                      audience: "${OIDC_AUDIENCE}"
                      expirationSeconds: 3600
                      path: token
            - name: workload-identity-credential-configuration
              configMap:
                name: gcp-workload-identity-federation
        EOF

  dev:
    deps:
      - setup-observability
      - setup-tenant-helm-values-files
      - setup-frontend-geopify-helm-values-files
    cmds:
      - '[[ -f ./hack/greenstar-server-values.yaml ]] || (mkdir -pv hack && touch ./hack/greenstar-server-values.yaml)'
      - skaffold dev --tail=false

  test:
    deps: [ toolchain:node ]
    dir: e2e
    cmds:
      - npm run test -- {{.CLI_ARGS}}

  docker-cleanup:
    cmds:
      - docker system prune --all --force --volumes

  download-cluster-state:
    cmds:
      - ./scripts/download-cluster-state.sh {{.CLI_ARGS}}
