name: Verify

on:
  push:
    branches: [ main ]
  pull_request:
    types:
      - opened
      - synchronize

defaults:
  run:
    shell: bash -exuo pipefail {0}

jobs:

  verify-generated-code:
    name: Verify ${{ matrix.module }} generated code
    runs-on: ubuntu-22.04
    strategy:
      matrix:
        module: [ acme, frontend, ratesjob, server ]
      fail-fast: true
    permissions:
      contents: read
    steps:

      - name: Checkout
        uses: actions/checkout@v4
        with:
          persist-credentials: false

      - name: Setup Task
        uses: arduino/setup-task@v2
        with:
          version: 3.x
          repo-token: ${{ secrets.GITHUB_TOKEN }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 23.x
          cache: npm
          cache-dependency-path: ${{ matrix.module }}/package-lock.json

      - name: Node Dependencies
        run: npm ci
        working-directory: ${{ matrix.module }}

      - name: Generate
        run: task generate-graphql-${{ matrix.module }}

      - name: Verify
        run: git diff --compact-summary --exit-code

  build-images:
    name: Build ${{ matrix.image }} image
    runs-on: ubuntu-22.04
    strategy:
      matrix:
        image: [ acme, e2e, frontend, ratesjob, scrapers, server ]
      fail-fast: true
    permissions:
      contents: read
    steps:

      - name: Checkout
        uses: actions/checkout@v4
        with:
          persist-credentials: false

      - name: Apply patches
        if: matrix.image == 'frontend'
        run: touch frontend/apply-patches.sh

      - name: Setup Docker Builder
        uses: docker/setup-buildx-action@v3
        with:
          install: true

      - name: Build image
        uses: docker/build-push-action@v6
        with:
          builder: ${{ steps.buildx.outputs.name }}
          cache-from: |
            type=gha,mode=max,scope=${{ github.event_name == 'pull_request' && format('pr-{0}-{1}', github.event.number, matrix.image) || format('{0}-{1}', github.ref_name, matrix.image) }}
            type=gha,mode=max,scope=main-${{ matrix.image }}
          cache-to: type=gha,mode=max,scope=${{ github.event_name == 'pull_request' && format('pr-{0}-{1}', github.event.number, matrix.image) || format('{0}-{1}', github.ref_name, matrix.image) }}
          context: ${{ matrix.image }}
          build-args: |
            VERSION=0.0.0+${{ github.sha }}
            VITE_API_URL=https://api.greenstar.test
          target: production
          push: false
          tags: ghcr.io/${{ github.repository }}/${{ matrix.image }}:${{ github.sha }}
          outputs: type=docker,dest=/tmp/${{ matrix.image }}.tar

      - name: Upload image ${{ matrix.image }}
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.image }}-image
          path: /tmp/${{ matrix.image }}.tar

  build-helm-package:
    name: Build Helm chart
    runs-on: ubuntu-22.04
    outputs:
      version: ${{ steps.package.outputs.version }}
    env:
      VERSION: "0.0.0+${{ github.sha }}"
    permissions:
      contents: read
    steps:

      - name: Checkout
        uses: actions/checkout@v4
        with:
          persist-credentials: false

      - name: Setup Helm
        uses: azure/setup-helm@v4

      - name: Setup Task
        uses: arduino/setup-task@v2
        with:
          version: 3.x
          repo-token: ${{ secrets.GITHUB_TOKEN }}

      - name: Package Helm chart
        run: |
          yq -i ".acme.image.tag = \"${IMAGES_TAG}\"" deploy/chart/values.yaml
          yq -i ".frontend.image.tag = \"${IMAGES_TAG}\"" deploy/chart/values.yaml
          yq -i ".ratesjob.image.tag = \"${IMAGES_TAG}\"" deploy/chart/values.yaml
          yq -i ".server.image.tag = \"${IMAGES_TAG}\"" deploy/chart/values.yaml
          helm package ./deploy/chart --app-version "${VERSION}" --version "${VERSION}"
        env:
          IMAGES_TAG: ${{ github.sha }}

      - name: Upload package artifact
        uses: actions/upload-artifact@v4
        with:
          name: helm-package
          path: greenstar-${{ env.VERSION }}.tgz

  test-e2e:
    name: Run End-to-End Tests
    runs-on: ubuntu-22.04
    needs: [ verify-generated-code, build-images, build-helm-package ]
    permissions:
      contents: read
    env:
      KIND_NODE_IMAGE_VERSION: "1.33.1"
    steps:

      - name: Checkout
        uses: actions/checkout@v4
        with:
          persist-credentials: false

      ### TOOLS ###

      - name: Setup Task
        uses: arduino/setup-task@v2
        with:
          version: 3.x
          repo-token: ${{ secrets.GITHUB_TOKEN }}

      - name: Setup Helm
        uses: azure/setup-helm@v4.2.0

      - name: Setup kind
        run: task toolchain:kind

      ### KIND DOCKER IMAGE CACHE ###

      - name: Get/store kind cluster node image
        id: kind-node-image-cache
        uses: actions/cache@v4
        with:
          path: /tmp/kind-image.tar
          key: ${{ runner.os }}-kind-node-image

      - name: Download kind cluster node image
        if: steps.kind-node-image-cache.outputs.cache-hit != 'true'
        run: |
          docker pull kindest/node:v${KIND_NODE_IMAGE_VERSION}
          docker save kindest/node:v${KIND_NODE_IMAGE_VERSION} -o /tmp/kind-image.tar

      - name: Load kind cluster node image
        if: steps.kind-node-image-cache.outputs.cache-hit == 'true'
        run: |
          docker load -i /tmp/kind-image.tar

      ### DOWNLOAD APPLICATION ARTIFACTS ###

      - name: Download application image artifacts
        uses: actions/download-artifact@v4
        with:
          pattern: '*-image'
          merge-multiple: true
          path: images

      - name: Download Helm package artifact
        uses: actions/download-artifact@v4
        with:
          name: helm-package
          path: .

      ### SETUP ENVIRONMENT & APPLICATION ###

      - name: Setup DNS
        run: task -v setup-domain-dns

      - name: Setup Cluster
        id: setup-cluster
        run: task setup-gateway

      - name: Load container images
        run: |
          for f in images/*.tar; do [[ "${f}" == "images/e2e.tar" ]] || kind load image-archive --name greenstar ${f}; done
          docker load -i images/e2e.tar

      - name: Install Helm package
        run: |
          task setup-tenant-helm-values-files setup-frontend-geopify-helm-values-files
          helm install greenstar ./greenstar-*.tgz \
              --create-namespace -n greenstar \
              -f ./deploy/local/chart-ci-values.yaml \
              -f ./hack/greenstar-frontend-values.yaml \
              -f ./hack/greenstar-tenants-values.yaml \
              --wait --wait-for-jobs

      ### RUN TESTS ###

      - name: Run tests
        id: test
        run: |
          for f in monocart-report playwright-report test-results; do mkdir -p $f && touch $f/.dont-delete-me; done
          docker run --network host \
                     -e CI=1 \
                     -v $(pwd)/playwright-report:/app/playwright-report \
                     -v $(pwd)/test-results:/app/test-results \
                     -v $(pwd)/monocart-report:/app/monocart-report \
                     ghcr.io/${{ github.repository }}/e2e:${{ github.sha }}
        working-directory: e2e

      ### TEARDOWN & UPLOAD RESULTS ###

      - name: Export cluster state
        id: export-cluster-state
        if: success() || steps.setup-cluster.outcome == 'failure' || steps.setup-cluster.outcome == 'success'
        run: |
          mkdir -p ./cluster-state
          kubectl get pods -A -o json | jq -r '.items[] | .metadata.namespace + " " + .metadata.name + " " + .spec.containers[].name' | \
            while read -r NAMESPACE POD_NAME CONTAINER_NAME; do
              mkdir -p "./cluster-state/${NAMESPACE}/${POD_NAME}"
              LOG_FILE="./cluster-state/${NAMESPACE}/${POD_NAME}/${CONTAINER_NAME}.log"
              kubectl logs --timestamps=true "${POD_NAME}" -n "${NAMESPACE}" -c "${CONTAINER_NAME}" > "${LOG_FILE}" 2>/dev/null
            done
          kubectl cluster-info dump -A -o yaml --output-directory=./cluster-state
          kubectl get gateways.gateway.networking.k8s.io -o yaml -A > ./cluster-state/gateways.yaml
          kubectl get httproutes.gateway.networking.k8s.io -o yaml -A > ./cluster-state/httproutes.yaml
          kubectl get jobs -o yaml -A > ./cluster-state/jobs.yaml
          kubectl get tlsroutes.gateway.networking.k8s.io -o yaml -A > ./cluster-state/tlsroutes.yaml

      - name: Upload cluster state artifact
        uses: actions/upload-artifact@v4
        if: success() || steps.export-cluster-state.outcome == 'success'
        with:
          name: cluster-state
          path: ./cluster-state
          include-hidden-files: true

      - name: Teardown
        run: task teardown-cluster
        if: success() || steps.setup-cluster.outcome == 'success' || steps.setup-cluster.outcome == 'failure'

      - name: Upload test results artifact
        uses: actions/upload-artifact@v4
        if: success() || steps.test.outcome == 'success' || steps.test.outcome == 'failure'
        with:
          name: e2e-test-results
          path: ./e2e/monocart-report/
          include-hidden-files: true

      - name: Create metadata artifact
        id: metadata
        if: success() || steps.test.outcome == 'success' || steps.test.outcome == 'failure'
        run: |
          echo '{ "pr": ${{ github.event.number || 0 }}, "sha": "${{ github.sha }}" }' > workflow-metadata.json
          jq < workflow-metadata.json

      - name: Upload metadata artifact
        uses: actions/upload-artifact@v4
        if: success() || steps.metadata.outcome == 'success' || steps.metadata.outcome == 'failure'
        with:
          name: metadata
          path: workflow-metadata.json
