{{- $prefix := include "greenstar.prefix" . -}}
{{- $componentName := "postgres" -}}
{{- $serviceAccountName := printf "%s-%s" $prefix $componentName -}}
{{- $serviceName := printf "%s-%s" $prefix $componentName -}}
{{- $secretName := printf "%s-%s" $prefix $componentName -}}
{{- $dataPVCName := printf "%s-%s-data" $prefix $componentName -}}
{{- $migrationsConfigMapName := printf "%s-%s-migrations" $prefix $componentName -}}
{{- $migrationUserPassword := default (randAlphaNum 16) .Values.server.migrate.postgresPassword -}}
{{- $postgresUserPassword := default (randAlphaNum 16) .Values.postgres.password -}}
{{- $serverUserPassword := default (randAlphaNum 16) .Values.server.postgresPassword -}}
{{- /*------------------------------------------------------------------------------------------------------------*/ -}}

---

apiVersion: v1
kind: ServiceAccount
metadata:
  {{- if not (empty .Values.postgres.rbac.annotations) }}
  annotations:
    {{ range $name, $value := .Values.postgres.rbac.annotations -}}
    {{ $name }}: {{ $value | quote }}
    {{- end }}
  {{- end }}
  labels:
    {{- include "greenstar.commonLabels" . | nindent 4 }}
    app.kubernetes.io/component: {{ $componentName | quote }}
  name: {{ $serviceAccountName | quote }}

---

apiVersion: v1
kind: Service
metadata:
  labels:
    {{- include "greenstar.commonLabels" . | nindent 4 }}
    app.kubernetes.io/component: {{ $componentName | quote }}
  name: {{ $serviceName | quote }}
spec:
  ports:
    - name: postgres
      port: 5432
      protocol: TCP
      targetPort: postgres
  selector:
    {{- include "greenstar.versionAgnosticLabels" . | nindent 4 }}
    app.kubernetes.io/component: {{ $componentName | quote }}

---

apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  labels:
    {{- include "greenstar.commonLabels" . | nindent 4 }}
    app.kubernetes.io/component: {{ $componentName | quote }}
  name: {{ $dataPVCName | quote }}
spec:
  volumeMode: Filesystem
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 4Gi
    limits:
      storage: 4Gi

---

apiVersion: v1
kind: Secret
metadata:
  labels:
    {{- include "greenstar.commonLabels" . | nindent 4 }}
    app.kubernetes.io/component: {{ $componentName | quote }}
  name: {{ $secretName | quote }}
type: Opaque
immutable: false
stringData:
  migration-user-pwd: {{ $migrationUserPassword | quote }}
  postgres-user-pwd: {{ $postgresUserPassword | quote }}
  server-user-pwd: {{ $serverUserPassword | quote }}
  init-users.sh: |
    {{- $file := .Files.Get "files/postgres-init.sh" -}}
    {{- $vars := dict -}}
    {{- $vars = merge $vars (dict "migrationUserPassword" $migrationUserPassword) -}}
    {{- $vars = merge $vars (dict "serverUserPassword" $serverUserPassword) -}}
    {{- $rendered := tpl $file $vars -}}
    {{ $rendered | nindent 4 }}

---

apiVersion: v1
kind: ConfigMap
metadata:
  annotations:
    "helm.sh/hook": pre-upgrade, post-install
    "helm.sh/hook-weight": "-21"
  labels:
    {{- include "greenstar.commonLabels" . | nindent 4 }}
    app.kubernetes.io/component: {{ $componentName | quote }}
  name: {{ $migrationsConfigMapName | quote }}
data:
{{ (.Files.Glob "files/migrations/*.sql").AsConfig | indent 2 }}

---

apiVersion: batch/v1
kind: Job
metadata:
  annotations:
    "helm.sh/hook": pre-upgrade, post-install
    "helm.sh/hook-weight": "-20"
  labels:
    {{- include "greenstar.commonLabels" . | nindent 4 }}
    app.kubernetes.io/component: {{ $componentName | quote }}
  name: {{ printf "%s-%s-migrate" $prefix $componentName | quote }}
spec:
  activeDeadlineSeconds: 300
  backoffLimit: 0
  template:
    metadata:
      labels:
        {{- include "greenstar.commonLabels" . | nindent 8 }}
        app.kubernetes.io/component: {{ $componentName | quote }}
    spec:
      containers:
        - image: flyway/flyway:11.3.1-alpine
          args: [ migrate ]
          env:
            - name: FLYWAY_URL
              value: jdbc:postgresql://{{ printf "%s-postgres" $prefix }}:5432/greenstar?connectTimeout=3&sslmode=disable
            - name: FLYWAY_USER
              value: "greenstar_migration"
            - name: FLYWAY_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: {{ printf "%s-%s" $prefix $componentName | quote }}
                  key: migration-user-pwd
                  optional: false
            - name: FLYWAY_LOCATIONS
              value: "filesystem:/var/lib/flyway/sql"
            - name: FLYWAY_OUTPUT_QUERY_RESULTS
              value: "true"
            {{- range $key, $value := .Values.server.migrate.extraEnv }}
            - name: {{ $key | quote }}
              {{ toYaml $value | nindent 14 }}
            {{- end }}
          name: flyway
          resources:
            limits:
              cpu: {{ required "Server migration CPU limit is required" .Values.server.migrate.resources.limits.cpu | quote }}
              memory: {{ required "Server migration RAM limit is required" .Values.server.migrate.resources.limits.memory | quote }}
            requests:
              cpu: {{ required "Server migration CPU request is required" .Values.server.migrate.resources.requests.cpu | quote }}
              memory: {{ required "Server migration RAM request is required" .Values.server.migrate.resources.requests.memory | quote }}
          volumeMounts:
            - name: migrations
              readOnly: true
              mountPath: /var/lib/flyway/sql
      volumes:
        - name: migrations
          configMap:
            name: {{ $migrationsConfigMapName | quote }}
            optional: false
      restartPolicy: OnFailure
      enableServiceLinks: false
      serviceAccountName: {{ $serviceAccountName | quote }}

---

apiVersion: apps/v1
kind: StatefulSet
metadata:
  labels:
    {{- include "greenstar.commonLabels" . | nindent 4 }}
    app.kubernetes.io/component: {{ $componentName | quote }}
  name: {{ printf "%s-postgres" $prefix | quote }}
spec:
  serviceName: {{ $serviceName | quote }}
  selector:
    matchLabels:
      {{- include "greenstar.versionAgnosticLabels" . | nindent 6 }}
      app.kubernetes.io/component: {{ $componentName | quote }}
  template:
    metadata:
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "9187"
        prometheus.io/path: "/metrics"
      labels:
        {{- include "greenstar.commonLabels" . | nindent 8 }}
        app.kubernetes.io/component: {{ $componentName | quote }}
    spec:
      {{- if .Values.postgres.clean }}
      initContainers:
        - image: "busybox:1.37"
          command:
            - rm
            - -rfv
            - /var/lib/postgresql/data/*
          name: clean
          resources:
            limits:
              cpu: 100m
              memory: 32Mi
            requests:
              cpu: 50m
              memory: 32Mi
          volumeMounts:
            - name: data
              mountPath: /var/lib/postgresql/data
              readOnly: false
      {{- end }}
      containers:
        - image: {{ printf "postgres:%s" .Values.postgres.version | quote }}
          {{- if not (empty .Values.postgres.extraArgs) }}
          args:
            {{- toYaml .Values.postgres.extraArgs | nindent 12 }}
          {{- end }}
          env:
            - name: PGDATA
              value: /var/lib/postgresql/data/pgdata
            - name: POSTGRES_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: {{ $secretName | quote }}
                  key: postgres-user-pwd
                  optional: false
            {{- range $key, $value := .Values.postgres.extraEnv }}
            - name: {{ $key | quote }}
              {{ toYaml $value | nindent 14 }}
            {{- end }}
          name: {{ $componentName | quote }}
          ports:
            - containerPort: 5432
              name: postgres
          resources:
            limits:
              cpu: {{ required "PostgreSQL CPU limit is required" .Values.postgres.resources.limits.cpu | quote }}
              memory: {{ required "PostgreSQL RAM limit is required" .Values.postgres.resources.limits.memory | quote }}
            requests:
              cpu: {{ required "PostgreSQL CPU request is required" .Values.postgres.resources.requests.cpu | quote }}
              memory: {{ required "PostgreSQL RAM request is required" .Values.postgres.resources.requests.memory | quote }}
          livenessProbe:
            exec:
              command: [ pg_isready, --user, postgres ]
            successThreshold: 1
            failureThreshold: 6
            timeoutSeconds: 10
            periodSeconds: 5
            terminationGracePeriodSeconds: 60
          readinessProbe:
            exec:
              command: [ pg_isready, --user, postgres ]
            successThreshold: 1
            failureThreshold: 1
            timeoutSeconds: 3
            periodSeconds: 1
          startupProbe:
            exec:
              command: [ pg_isready, --user, postgres ]
            initialDelaySeconds: 1
            successThreshold: 1
            failureThreshold: 10
            periodSeconds: 3
            timeoutSeconds: 3
            terminationGracePeriodSeconds: 60
          volumeMounts:
            {{- if not (empty .Values.postgres.volumeMounts) }}
            {{- toYaml .Values.postgres.volumeMounts | nindent 12 }}
            {{- end }}
            - name: data
              mountPath: /var/lib/postgresql/data
              readOnly: false
            - name: init-scripts
              mountPath: /docker-entrypoint-initdb.d
              readOnly: true
        {{- if .Values.postgres.metrics }}
        - image: "quay.io/prometheuscommunity/postgres-exporter:v0.17.1"
          args:
{{/*            - --collector.long_running_transactions*/}}
            - --collector.process_idle
            - --no-collector.replication
            - --collector.stat_activity_autovacuum
            - --collector.stat_statements
            - --disable-settings-metrics
          env:
{{/*            - name: PG_EXPORTER_DISABLE_SETTINGS_METRICS*/}}
{{/*              value: "true"*/}}
            - name: DATA_SOURCE_URI
              value: "localhost:5432/postgres?sslmode=disable"
            - name: DATA_SOURCE_USER
              value: "postgres"
            - name: DATA_SOURCE_PASS
              valueFrom:
                secretKeyRef:
                  name: {{ $secretName | quote }}
                  key: postgres-user-pwd
                  optional: false
          name: metrics
          ports:
            - containerPort: 9187
              name: metrics
          resources:
            limits:
              cpu: 500m
              memory: 64Mi
            requests:
              cpu: 100m
              memory: 32Mi
        {{- end }}
      enableServiceLinks: false
      serviceAccountName: {{ $serviceAccountName | quote }}
      volumes:
        {{- if not (empty .Values.postgres.volumes) }}
        {{- toYaml .Values.postgres.volumes | nindent 8 }}
        {{- end }}
        - name: init-scripts
          secret:
            secretName: {{ $secretName | quote }}
            optional: false
            items:
              - key: init-users.sh
                path: init-users.sh
        - name: data
          persistentVolumeClaim:
            claimName: {{ $dataPVCName | quote }}
            readOnly: false
{{- if .Values.postgres.ingress.enabled }}
---
apiVersion: gateway.networking.k8s.io/v1alpha2
kind: TLSRoute
metadata:
  labels:
    {{- include "greenstar.commonLabels" . | nindent 4 }}
    app.kubernetes.io/component: {{ $componentName | quote }}
  name: {{ printf "%s-%s" $prefix "postgres-tls" | quote }}
spec:
  parentRefs:
    - name: {{ .Values.postgres.ingress.parentRef.name }}
      namespace: {{ .Values.postgres.ingress.parentRef.namespace }}
      sectionName: {{ .Values.postgres.ingress.parentRef.tlsSectionName }}
      kind: {{ .Values.postgres.ingress.parentRef.kind }}
  hostnames:
    - {{ printf "postgres.%s" .Values.ingress.domain | quote }}
  rules:
    - backendRefs:
        - name: {{ $serviceName | quote }}
          namespace: {{ .Release.Namespace | quote }}
          port: 5432
          kind: Service
{{- end }}
